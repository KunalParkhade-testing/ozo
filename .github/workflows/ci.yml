name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend:
    name: Backend tests & lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ozo
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify Postgres connection and run migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/ozo
          SECRET_KEY: test-secret-key-for-ci
          PYTHONPATH: ${{ github.workspace }}/backend
        run: |
          echo "Testing PostgreSQL migrations..."
          alembic -c alembic.ini upgrade head
          echo "Migrations successful!"

      - name: Run backend tests
        working-directory: backend
        env:
          SECRET_KEY: test-secret-key-for-ci
          PYTHONPATH: ${{ github.workspace }}/backend
        run: |
          pytest -q --junitxml=pytest-results.xml

      - name: Upload pytest results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: backend/pytest-results.xml

      - name: Lint (flake8)
        working-directory: backend
        run: |
          flake8 app/

  frontend:
    name: Frontend build & lint
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install and build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Lint frontend (eslint)
        working-directory: frontend
        run: |
          npm run lint

  docker-build:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: ozo/backend:ci

      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: ozo/frontend:ci
